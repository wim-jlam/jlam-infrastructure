version: '3.8'

# ============================================
# JLAM Platform - Local Development Environment  
# ============================================
# Complete local stack for testing before cloud deployment
# Run with: docker-compose -f docker-compose.local.yml up -d
# ============================================

services:
  # ============================================
  # Traefik - Reverse Proxy with Purchased SSL
  # ============================================
  traefik:
    image: traefik:v3.0
    container_name: jlam-traefik-local
    restart: unless-stopped
    
    ports:
      - "80:80"     # HTTP only
      - "8080:8080" # Dashboard
    
    command:
      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.debug=true"
      
      # Docker Provider
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=jlam-local"
      
      # NO SSL file provider for HTTP-only development
      
      # Entrypoints (HTTP only)
      - "--entrypoints.web.address=:80"
      
      # NO redirects for local HTTP development
      
      # Logging
      - "--log.level=DEBUG"
      - "--accesslog=true"
      
      # NO ACME/Let's Encrypt - Using purchased certificates
      
    volumes:
      # Docker socket for service discovery
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      
      # NO SSL certificates for HTTP-only development
      
      # Logs
      - "./logs/traefik:/logs"
    
    networks:
      - jlam-local
    
    labels:
      - "traefik.enable=true"
      
      # Dashboard (unsecured for local development)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=web"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # PostgreSQL Database (Local)
  # ============================================  
  postgres:
    image: postgres:15-alpine
    container_name: jlam-postgres-local
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: jlam_dev
      POSTGRES_USER: jlam_user
      POSTGRES_PASSWORD: dev_password_123
      
      # Multiple databases for different services
      POSTGRES_MULTIPLE_DATABASES: "jlam_dev,authentik_dev,monitoring_dev"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - "./database/init:/docker-entrypoint-initdb.d"
      
    ports:
      - "5433:5432"  # Exposed for external tools (avoiding conflict with existing PostgreSQL)
    
    networks:
      - jlam-local
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jlam_user -d jlam_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================
  # Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: jlam-redis-local
    restart: unless-stopped
    
    command: redis-server --save 60 1 --loglevel warning --requirepass dev_redis_pass
    
    volumes:
      - redis_data:/data
      
    ports:
      - "6380:6379"  # Exposed for external tools (avoiding conflict)
    
    networks:
      - jlam-local
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "dev_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Authentik Server (SSO) 
  # ============================================
  authentik-server:
    image: ghcr.io/goauthentik/server:2024.8
    container_name: jlam-authentik-server-local
    restart: unless-stopped
    command: server
    
    environment:
      # Database Configuration (Local PostgreSQL)
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_POSTGRESQL__NAME: authentik_dev
      AUTHENTIK_POSTGRESQL__USER: jlam_user
      AUTHENTIK_POSTGRESQL__PASSWORD: dev_password_123
      
      # Redis Configuration  
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      AUTHENTIK_REDIS__PASSWORD: dev_redis_pass
      AUTHENTIK_REDIS__DB: 0
      
      # Security Keys (Development - NOT for production!)
      AUTHENTIK_SECRET_KEY: "development-secret-key-at-least-50-chars-long-for-local-testing-only"
      
      # Cookie Configuration (IMPORTANT: Double underscore!)
      AUTHENTIK_COOKIE__SECURE: "false"  # HTTP for local development
      AUTHENTIK_COOKIE__HTTPONLY: "true"
      AUTHENTIK_COOKIE__SAMESITE: "lax"
      AUTHENTIK_COOKIE__DOMAIN: "localhost"
      
      # Email Configuration (Disabled for local)
      AUTHENTIK_EMAIL__HOST: ""
      AUTHENTIK_EMAIL__PORT: ""
      AUTHENTIK_EMAIL__USE_TLS: "false"
      AUTHENTIK_EMAIL__FROM: "dev@localhost"
      
      # Error Reporting (Disabled)
      AUTHENTIK_ERROR_REPORTING__ENABLED: "false"
      
      # Log Level
      AUTHENTIK_LOG_LEVEL: "debug"
      
      # Bootstrap Admin User
      AUTHENTIK_BOOTSTRAP_PASSWORD: "admin123"
      AUTHENTIK_BOOTSTRAP_TOKEN: "dev-bootstrap-token"
    
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    
    networks:
      - jlam-local
    
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=jlam-local"
      
      # HTTP Router (for local development)
      - "traefik.http.routers.authentik-local.rule=Host(`auth.localhost`)"
      - "traefik.http.routers.authentik-local.entrypoints=web"
      - "traefik.http.services.authentik-local.loadbalancer.server.port=9000"
      
      # Health Check
      - "traefik.http.services.authentik-local.loadbalancer.healthcheck.path=/-/health/ready/"
      - "traefik.http.services.authentik-local.loadbalancer.healthcheck.interval=30s"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/-/health/ready/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # ============================================
  # Authentik Worker
  # ============================================
  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.8
    container_name: jlam-authentik-worker-local
    restart: unless-stopped
    command: worker
    
    environment:
      # Same as server
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__PORT: 5432
      AUTHENTIK_POSTGRESQL__NAME: authentik_dev
      AUTHENTIK_POSTGRESQL__USER: jlam_user
      AUTHENTIK_POSTGRESQL__PASSWORD: dev_password_123
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_REDIS__PORT: 6379
      AUTHENTIK_REDIS__PASSWORD: dev_redis_pass
      AUTHENTIK_SECRET_KEY: "development-secret-key-at-least-50-chars-long-for-local-testing-only"
      AUTHENTIK_LOG_LEVEL: "debug"
    
    volumes:
      - authentik_media:/media
      - authentik_templates:/templates
    
    networks:
      - jlam-local
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ============================================
  # JLAM Landing Page (Simple Test Service)
  # ============================================
  landing:
    image: nginx:alpine
    container_name: jlam-landing-local
    restart: unless-stopped
    
    volumes:
      - "./app:/usr/share/nginx/html:ro"
    
    networks:
      - jlam-local
    
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=jlam-local"
      
      # Main domain
      - "traefik.http.routers.landing.rule=Host(`jlam.localhost`)"
      - "traefik.http.routers.landing.entrypoints=web"
      - "traefik.http.services.landing-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.landing.service=landing-svc"
      
      # App subdomain  
      - "traefik.http.routers.app.rule=Host(`app.localhost`)"
      - "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.app.service=app-svc"

  # ============================================
  # Monitoring Stack (Optional - for testing)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: jlam-prometheus-local
    restart: unless-stopped
    
    volumes:
      - "./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    networks:
      - jlam-local
    
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=jlam-local"
      - "traefik.http.routers.prometheus-local.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus-local.entrypoints=web"
      - "traefik.http.services.prometheus-local.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: jlam-grafana-local
    restart: unless-stopped
    
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: redis-datasource
    
    volumes:
      - grafana_data:/var/lib/grafana
      - "./monitoring/grafana:/etc/grafana/provisioning"
    
    networks:
      - jlam-local
    
    ports:
      - "3005:3000"  # Avoid conflict with existing service on 3000 and 3001
    
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=jlam-local"
      - "traefik.http.routers.grafana-local.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.grafana-local.entrypoints=web"
      - "traefik.http.services.grafana-local.loadbalancer.server.port=3000"

# ============================================
# Networks
# ============================================
networks:
  jlam-local:
    external: true

# ============================================
# Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  authentik_media:
    driver: local
  authentik_templates:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local